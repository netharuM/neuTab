(()=>{var e={947:(e,t,n)=>{"use strict";n.d(t,{Z:()=>y});var r=n(537),o=n.n(r),s=n(645),i=n.n(s),a=n(667),l=n.n(a),c=new URL(n(11),n.b),u=new URL(n(254),n.b),d=new URL(n(975),n.b),h=new URL(n(713),n.b),m=i()(o()),p=l()(c),f=l()(u),v=l()(d),g=l()(h);m.push([e.id,"@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url("+p+"); /* For IE6-8 */\n  src: local('Material Icons'),\n       local('MaterialIcons-Regular'),\n       url("+f+") format('woff2'),\n       url("+v+") format('woff'),\n       url("+g+") format('truetype');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;  /* Preferred icon size */\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  font-feature-settings: 'liga';\n}\n","",{version:3,sources:["webpack://./node_modules/material-design-icons/iconfont/material-icons.css"],names:[],mappings:"AAAA;EACE,6BAA6B;EAC7B,kBAAkB;EAClB,gBAAgB;EAChB,4CAAmC,EAAE,cAAc;EACnD;;;;iEAIsD;AACxD;;AAEA;EACE,6BAA6B;EAC7B,mBAAmB;EACnB,kBAAkB;EAClB,eAAe,GAAG,wBAAwB;EAC1C,qBAAqB;EACrB,cAAc;EACd,oBAAoB;EACpB,sBAAsB;EACtB,iBAAiB;EACjB,mBAAmB;EACnB,cAAc;;EAEd,qCAAqC;EACrC,mCAAmC;EACnC,mCAAmC;EACnC,kCAAkC;;EAElC,yBAAyB;EACzB,kCAAkC;;EAElC,oBAAoB;EACpB,6BAA6B;AAC/B",sourcesContent:["@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(MaterialIcons-Regular.eot); /* For IE6-8 */\n  src: local('Material Icons'),\n       local('MaterialIcons-Regular'),\n       url(MaterialIcons-Regular.woff2) format('woff2'),\n       url(MaterialIcons-Regular.woff) format('woff'),\n       url(MaterialIcons-Regular.ttf) format('truetype');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;  /* Preferred icon size */\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  font-feature-settings: 'liga';\n}\n"],sourceRoot:""}]);const y=m},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,s){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var s={},i=[],a=0;a<e.length;a++){var l=e[a],c=r.base?l[0]+r.base:l[0],u=s[c]||0,d="".concat(c," ").concat(u);s[c]=u+1;var h=n(d),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(m);else{var p=o(m,r);r.byIndex=a,t.splice(a,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var s=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<s.length;i++){var a=n(s[i]);t[a].references--}for(var l=r(e,o),c=0;c<s.length;c++){var u=n(s[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}s=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},634:e=>{class t{constructor(e="BtnCreation"){this.animations=[],this.animation=e}convertTime(e){return e%6e4/1e3}animate(){if(this.animations.length>0)for(;this.animation.length>0;){var e=this.animations[0];if(e.element.style.animation=`${this.animation} ${this.convertTime(e.time)}s`,setTimeout((()=>{e.element.style.animation=""}),e.time),this.animations.shift(),0==this.animations.length)break}}addAnimation(e,t){this.animations.push({element:e,time:t}),this.animate()}}class n{constructor(e,t=".favourites",n=".favouritesBtn",r="a:not(.dragIndicator),button:not(.dragIndicator)"){this.container=document.querySelector(t),this.btnQuery=n,this.favouritesQuery=r,this.dragData={from:null,to:null,calculate:null},this.onDrop=e}createIndicator(e){var t=document.createElement("div");return t.className="dragIndicator",t.addEventListener("dragover",(e=>{e.preventDefault(),t.classList.add("dragover")})),t.addEventListener("dragleave",(e=>{t.classList.remove("dragover")})),t.addEventListener("drop",(n=>{var r={element:t,event:n,elementOwn:e};this.dragData.to=r,this.dragData.from.element.classList.remove("dragging"),this.calculateDrop(),this.onDrop(this.dragData)})),t}calculateDrop(){var e=this.container.querySelectorAll(this.favouritesQuery),t=this.container.querySelectorAll(".dragIndicator");e=Array.from(e),t=Array.from(t),this.dragData.calculate={from:e.indexOf(this.dragData.from.element),to:t.indexOf(this.dragData.to.element),effectedTo:e.indexOf(this.dragData.to.elementOwn)}}addIndicators(){var e=this.container.children;(e=Array.from(e)).forEach(((t,n)=>{t.isEqualNode(this.dragData.from.element)&&n>-1&&e.splice(n,1)})),e.forEach((e=>{var t=this.createIndicator(e);this.container.insertBefore(t,e)}))}removeIndicators(){var e=document.querySelectorAll(".dragIndicator");for(e=Array.from(e);e.length>0;)e[0].remove(),e.shift()}dragStart(e,t){t.classList.add("dragging");var n,r=this.container.querySelectorAll("a:not(.dragging)");(r=Array.from(r)).forEach((e=>{e.style.pointerEvents="none"})),n={element:t,event:e},this.dragData.from=n,this.addIndicators()}dragEnd(e,t){t.classList.remove("dragging");var n=this.container.querySelectorAll("a:not(.dragging)");(n=Array.from(n)).forEach((e=>{e.style.pointerEvents="auto"})),this.removeIndicators()}addToElement(e){e.draggable=!0,e.addEventListener("dragstart",(t=>{this.dragStart(t,e)})),e.addEventListener("dragend",(t=>{this.dragEnd(t,e)}))}}e.exports={favourites:class{constructor(e,r,o='<i class="material-icons" style="margin-left: 5px;">home</i>'){this.root=document.querySelector(":root"),this.favourites=[],this.favBtns=[],this.sync=!0,this.onCreate=e,this.homeIcon=o,this.addBtn=document.getElementById("addFavourite"),this.appName=document.getElementById("appName"),this.newFav=document.getElementById("newFav"),this.favContainer=document.getElementById("favourites"),this.animations=new t("BtnCreation"),this.dragAndDrop=new n((e=>this.move(e))),this.addBtn.addEventListener("mouseover",(()=>{this.appName.innerHTML="Add new Favourite",this.addBtn.onmouseout=()=>{this.appName.innerHTML=this.homeIcon}})),this.addBtn.addEventListener("click",(()=>{this.addNewFavourite()})),this.sync&&this.syncWithChrome()}move(e){var t=e.from.element.title,n=e.from.element.href,r=this.createFavourite(t,n);if(this.dragAndDrop.addToElement(r),this.animations.addAnimation(r,250),e.from.element.remove(),e.to.element.parentNode.insertBefore(r,e.to.element.nextSibling),e.calculate.to>this.favourites.length)for(var o=e.calculate.to-this.favourites.length+1;o--;)this.favourites.push(void 0);this.favourites.splice(e.calculate.to,0,this.favourites.splice(e.calculate.from,1)[0]),chrome.storage.sync.set({favourites:this.favourites})}syncWithChrome(){chrome.storage.sync.get(["favourites"],(e=>{null!=e.favourites?(this.favourites=e.favourites,this.refresh()):null==e.favourites&&chrome.storage.sync.set({favourites:this.favourites})})),chrome.storage.onChanged.addListener(((e,t)=>{for(let[t,{oldValue:n,newValue:r}]of Object.entries(e))"favourites"==t&&(this.favourites=r,this.refresh())}))}refresh(){this.favourites.forEach((e=>{var t=this.createFavourite(e.name,e.link);this.isExist(t)||this.addFavourite(e.name,e.link)})),this.favBtns.forEach((e=>{this.isRemoved(e)&&(e.remove(),this.favBtns.pop(e))}))}isExist(e){for(let t=0;t<this.favBtns.length;t++)if(this.favBtns[t].href==e.href)return!0;return!1}isRemoved(e){var t=[];for(let e=0;e<this.favourites.length;e++)t.push(this.favourites[e].link);var n=e.href;return"/"==n[n.length-1]&&(n=n.substring(0,n.length-1)),t.forEach(((e,n)=>{"/"==e[e.length-1]&&(t[n]=e.substring(0,e.length-1))})),!t.includes(n)}addFavourite(e,t,n=this.sync){if(null==e||null==t||""==e||""==t)throw new Error("name and url are required");var r=this.createFavourite(e,t);this.dragAndDrop.addToElement(r),this.favBtns.push(r),this.favContainer.insertBefore(r,this.addBtn),this.animations.addAnimation(r,450);var o={elementId:r.id,name:e,link:t};return n&&!function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(r.name==t.name&&r.link==t.link)return!0}return!1}(this.favourites,o)&&(this.favourites.push(o),chrome.storage.sync.set({favourites:this.favourites})),r}createFavourite(e,t){if(null==e||null==t||""==e||""==t)throw new Error("name and url are required");var n=document.createElement("a");n.className="favouritesBtn",n.title=e,n.addEventListener("mouseover",(()=>{this.appName.innerHTML=e,n.onmouseout=()=>{this.appName.innerHTML=this.homeIcon}})),n.setAttribute("href",t),n.id="fav-"+t.split("/")[2];var r=document.createElement("span");n.appendChild(r);var o=document.createElement("img");return o.src=this.favicon(t),o.width="25",o.height="25",r.appendChild(o),r.appendChild(document.createElement("br")),null!=this.onCreate&&this.onCreate(n),n}favicon(e){return"chrome://favicon/size/128@1x/"+e}addNewFavourite(){this.newFav.show(),this.root.style.setProperty("--filter","blur(3px)"),this.root.style.setProperty("--block-index","1"),this.appName.innerHTML="Adding a new favourite";var e=this.newFav.querySelector("#name"),t=this.newFav.querySelector("#url"),n=this.newFav.querySelector("#close"),r=this.newFav.querySelector("#create"),o=()=>{this.newFav.close(),this.root.style.setProperty("--filter","none"),this.root.style.setProperty("--block-index","-2"),i()},s=()=>{this.addFavourite(e.value,t.value),this.newFav.close(),this.root.style.setProperty("--filter","none"),this.root.style.setProperty("--block-index","-2"),e.value="",t.value="",i()},i=()=>{n.removeEventListener("click",o),r.removeEventListener("click",s)};n.addEventListener("click",o),r.addEventListener("click",s)}removeFavourite(e){this.favourites.forEach(((t,n)=>{t.elementId==e.id&&(this.favourites.splice(n,1),e.remove(),1==this.sync?chrome.storage.sync.set({favourites:this.favourites}):this.refresh())}))}}}},451:e=>{e.exports={settings:class{constructor(){this.background=document.getElementById("background"),this.settingsPanel=document.getElementById("settingsPanel"),this.settingsOuterBox=document.getElementById("settingsOuterBox"),this.settingsBtn=document.getElementById("settingsBtn"),this.appName=document.getElementById("appName"),this.settingsBtn.addEventListener("click",(e=>{this.openSettings()})),this.settingsBtn.addEventListener("mouseover",(e=>{this.appName.innerText="Settings",this.settingsBtn.onmouseout=()=>{this.appName.innerHTML='<i class="material-icons" style="margin-left: 5px;">home</i>'}})),this.settingsOuterBox.addEventListener("click",(e=>{e.target==this.settingsOuterBox&&this.closeSettings()})),this.wallpaperOpen=document.getElementById("wallpaperSelector"),this.wallpaperOpen.addEventListener("change",(e=>this.wallpaperChange(e))),chrome.storage.local.get("background",(e=>{this.background.style.backgroundImage=`url(${e.background})`})),this.wallpaperOpenBtn=document.getElementById("selectWallpaperBtn"),this.wallpaperOpenBtn.onclick=()=>{this.wallpaperOpen.click()}}wallpaperChange(e){const t=new FileReader;t.addEventListener("load",(e=>{this.background.style.backgroundImage=`url(${e.target.result})`,chrome.storage.local.set({background:t.result})})),t.readAsDataURL(e.target.files[0])}openSettings(){this.settingsOuterBox.style.visibility="visible"}closeSettings(){this.settingsOuterBox.style.visibility="hidden"}}}},11:(e,t,n)=>{"use strict";e.exports=n.p+"4674f8ded773cb03e824.eot"},713:(e,t,n)=>{"use strict";e.exports=n.p+"5e7382c63da0098d634a.ttf"},975:(e,t,n)=>{"use strict";e.exports=n.p+"83bebaf37c09c7e1c3ee.woff"},254:(e,t,n)=>{"use strict";e.exports=n.p+"cff684e59ffb052d72cb.woff2"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={id:r,exports:{}};return e[r](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{"use strict";var e=n(379),t=n.n(e),r=n(795),o=n.n(r),s=n(569),i=n.n(s),a=n(565),l=n.n(a),c=n(216),u=n.n(c),d=n(589),h=n.n(d),m=n(947),p={};p.styleTagTransform=h(),p.setAttributes=l(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=u(),t()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;var f=document.createElement("div");f.innerHTML="remove";var v=document.createElement("div");v.innerHTML="notremovetho";const g=new class{constructor(e){this.opened=!1,this.elements=[],this.root=document.querySelector(":root"),this.container=document.querySelector(".contextMenus"),this.contextMenu=document.createElement("div"),this.contextMenu.id="context-menu-test",this.contextMenu.style.display="none",this.contextMenu.className="context-menu",this.menu=e,this.lastClickedElement=void 0,null!=this.menu&&this.menu.forEach((e=>{var t=e.element;t.id=e.id,t.addEventListener("mousedown",(t=>{e.callBack(this.lastClickedElement)}),!1),this.contextMenu.appendChild(t)})),this.container.appendChild(this.contextMenu),document.addEventListener("contextmenu",(e=>{for(let t=0;t<this.elements.length;t++){const n=this.elements[t];if(e.path.includes(n)){e.preventDefault(),this.showMenu(e),this.lastClickedElement=n;break}1==this.opened&&this.hideMenu()}}),!1),document.addEventListener("mousedown",(()=>this.hideMenu()),!1)}addToElement(e){this.elements.push(e)}hideMenu(){this.opened=!1,this.root.style.setProperty("--blocker-context-menu","-2"),this.contextMenu.style.display="none",this.lastClickedElement=void 0}showMenu(e){"none"==this.contextMenu.style.display?(this.opened=!0,this.root.style.setProperty("--blocker-context-menu","0"),this.contextMenu.style.display="block",this.contextMenu.style.left=e.pageX+"px",this.contextMenu.style.top=e.pageY+"px"):(this.opened=!1,this.contextMenu.style.display="none",this.root.style.setProperty("--blocker-context-menu","-2"))}}([{callBack:e=>{w.removeFavourite(e)},element:f,id:"remove"},{callBack:e=>{console.log(e),alert("this is still in development not remove button this time")},element:v,id:"notremove"}]),y=(new class{constructor(e=document.querySelector(".cursor"),t=document.querySelector(".cursor-lazy")){this.cursor=e,this.lazyCursor=t,window.addEventListener("mousemove",(e=>{this.show(),this.editCursor(e)})),window.addEventListener("mousedown",(e=>{this.click(e)}),!1),window.addEventListener("mouseup",(e=>{this.release(e)}),!1),window.addEventListener("mouseout",(e=>{this.hide()}),!1)}editCursor(e){this.cursor.style.left=e.pageX+"px",this.cursor.style.top=e.pageY+"px",this.lazyCursor.style.left=e.pageX+"px",this.lazyCursor.style.top=e.pageY+"px"}click(e){this.lazyCursor.style.width="30px",this.lazyCursor.style.height="30px"}release(e){this.lazyCursor.style.width="45px",this.lazyCursor.style.height="45px"}hide(){this.cursor.style.display="none",this.lazyCursor.style.display="none"}show(){this.cursor.style.display="block",this.lazyCursor.style.display="block"}},new class{constructor(e){this.element=document.getElementById(e),this.refresh(),setInterval((()=>this.refresh()),1e3)}refresh(){this.element.innerHTML=(new Date).toLocaleTimeString()}}("countClock"),new class{constructor(e='<i class="material-icons" style="margin-left: 5px;">home</i>'){this.minimum=5,this.homeIcon=e}setTopSites(e=this.minimum){chrome.topSites.get((t=>{e<this.minimum&&(e=this.minimum),this.removeAllShortcuts();for(var n=0;n<e;n++)this.addShortCut(t[n].url,t[n].title)}))}addShortCut(e,t){var n=document.getElementById("shortcutContainer"),r=document.createElement("a");r.className="shortcutBtn",r.addEventListener("mouseover",(t=>{appName.innerHTML=e.split("/")[2],r.onmouseout=()=>{appName.innerHTML=this.homeIcon}}),!1),r.href=e,r.id="shortcut-"+e.split("/")[2],n.appendChild(r);var o=document.createElement("span");r.appendChild(o);var s=document.createElement("img");s.src=this.getFaviconFromUrl(e),s.alt=t,s.width="25",s.height="25",o.appendChild(s),o.appendChild(document.createElement("br"))}removeAllShortcuts(){console.log("removing all shortcuts");for(var e=document.getElementById("shortcutContainer");e.firstChild;)e.removeChild(e.firstChild)}getFaviconFromUrl(e){return"chrome://favicon/size/128@1x/"+e}}),{favourites:E}=n(634),{settings:A}=n(451);var w;new A,y.setTopSites(),w=new E((e=>{g.addToElement(e)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,